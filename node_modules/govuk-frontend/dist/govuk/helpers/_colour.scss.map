{"version":3,"sources":["../../../src/govuk/helpers/_colour.scss"],"names":[],"mappings":"AAAA,qCAAqC;AACrC,2CAA2C;AAC3C,8BAA8B;;AAE9B,GAAG;AACH,wBAAwB;AACxB,GAAG;;AAEH,aAAa;AACb,EAAE;AACF,4EAA4E;AAC5E,wBAAwB;AACxB,kFAAkF;AAClF,wBAAwB;AACxB,kDAAkD;AAClD,EAAE;AACF,8DAA8D;AAC9D,+EAA+E;AAC/E,2FAA2F;AAC3F,iBAAiB;;AAEjB;EACE,uEAAuE;EACvE,sDAAsD;EACtD,6DAA6D;EAC7D;IACE,qBAAqB;EACvB;;EAEA,4CAA4C;;EAE5C;IACE,kFAAkF;IAClF,mFAAmF;IACnF;MACE,iEAAiE;MACjE;QACE,6BAA6B;MAC/B;IACF;;IAEA,+EAA+E;EACjF;;EAEA,gGAAgG;EAChG;IACE,wBAAwB;EAC1B;;EAEA;IACE,sGAAsG;EACxG;;EAEA,4CAA4C;;EAE5C;IACE,kHAAkH;EACpH;;EAEA,eAAe;AACjB;;AAEA;EACE,8DAA8D;;EAE9D;IACE,gDAAgD;IAChD,iDAAiD;;IAEjD,mHAAmH;;IAEnH;MACE;;;;;OAKC;IACH;;IAEA,6EAA6E;EAC/E;AACF;;AAEA,+CAA+C;AAC/C,EAAE;AACF,2EAA2E;AAC3E,sEAAsE;AACtE,8EAA8E;AAC9E,6EAA6E;AAC7E,2EAA2E;AAC3E,0EAA0E;AAC1E,0EAA0E;AAC1E,oEAAoE;AACpE,EAAE;AACF,6DAA6D;AAC7D,wDAAwD;AACxD,iBAAiB;;AAEjB;EACE,yEAAyE;EACzE,8CAA8C;EAC9C;IACE,4EAA4E;EAC9E;;EAEA,yCAAyC;EACzC;IACE,gDAAgD;EAClD;;EAEA,0EAA0E;EAC1E,+BAA+B;EAC/B,+EAA+E;EAC/E;IACE;;;;KAIC;EACH;;EAEA,sCAAsC;EACtC;IACE;;;;KAIC;EACH;;EAEA,iEAAiE;;EAEjE;IACE;;;KAGC;EACH;;EAEA,6EAA6E;EAC7E,6EAA6E;EAC7E,mDAAmD;EACnD;IACE,wBAAwB;EAC1B;;EAEA,0EAA0E;EAC1E,+BAA+B;EAC/B,iFAAiF;;EAEjF;IACE,uCAAuC;EACzC,EAAE;IACA,oCAAoC;EACtC;AACF;;AAEA,+CAA+C;AAC/C,EAAE;AACF,4CAA4C;AAC5C,yEAAyE;AACzE,cAAc;AACd,mBAAmB;AACnB,iBAAiB;AACjB,EAAE;AACF,qCAAqC;;AAErC;EACE;IACE,qKAAqK;EACvK;;EAEA,eAAe;AACjB;;AAEA,2DAA2D;AAC3D,EAAE;AACF,2CAA2C;AAC3C,yEAAyE;AACzE,cAAc;AACd,mBAAmB;AACnB,iBAAiB;AACjB,EAAE;AACF,qCAAqC;;AAErC;EACE;IACE,mKAAmK;EACrK;;EAEA,eAAe;AACjB;;AAEA,qEAAqE;AACrE,4BAA4B;AAC5B,EAAE;AACF,8DAA8D;AAC9D,EAAE;AACF,kDAAkD;AAClD,mBAAmB;AACnB,kBAAkB;AAClB;EACE;IACE,eAAe;EACjB;;EAEA,0EAA0E;EAC1E,qDAAqD;EACrD;;;;;GAKC;;EAED,wCAAwC;AAC1C","file":"_colour.scss","sourcesContent":["@import \"../settings/colours-palette\";\n@import \"../settings/colours-organisations\";\n@import \"../settings/warnings\";\n\n////\n/// @group helpers/colour\n////\n\n/// Get colour\n///\n/// @param {String | Colour} $colour - Name of colour from the colour palette\n///   (`$_govuk-palette`)\n/// @param {String | Colour} $variant - Name of the variant from the colour palette\n///   (`$_govuk-palette`)\n/// @return {Colour} Representation of named colour\n///\n/// @throw if `$colour` is not a colour from the colour palette\n/// @throw if `$variant` is not a variant of the `$colour` in the colour palette\n/// @throw if the palette is misformatted and doesn't associate a colour or map to `$colour`\n/// @access public\n\n@function govuk-colour($colour, $variant: primary, $colours: $_govuk-palette) {\n  // Sass parses unquoted colours as colours, so we need to turn them into\n  // strings before looking them up in the colour palette\n  // https://sass-lang.com/documentation/values/strings#unquoted\n  @if type-of($colour) != \"string\" {\n    $colour: \"#{$colour}\";\n  }\n\n  $colour-variants: map-get($colours, $colour);\n\n  @if not $colour-variants {\n    // To ease the transition between the brand palette and old GOV.UK Frontend colours\n    // we'll automatically convert old colour names into their equivalent in the palette\n    @if $colours == $_govuk-palette {\n      $corresponding-colour: _govuk-corresponding-brand-colour($colour);\n      @if $corresponding-colour {\n        @return $corresponding-colour;\n      }\n    }\n\n    @error \"Unknown colour `#{$colour}` (available colours: #{map-keys($colours)})\";\n  }\n\n  // Some colours may not have variants, if that's the case, we can return the colour straight away\n  @if type-of($colour-variants) == \"color\" {\n    @return $colour-variants;\n  }\n\n  @if type-of($colour-variants) != \"map\" {\n    @error \"Colour `#{$colour}` should either be a `map` or `color`, not a `#{type-of($colour-variants)}`\";\n  }\n\n  $result: map-get($colour-variants, $variant);\n\n  @if not $result {\n    @error \"Unknown variant `#{$variant}` for colour `#{$colour}` (available variants: #{map-keys($colour-variants)})\";\n  }\n\n  @return $result;\n}\n\n@function _govuk-corresponding-brand-colour($colour) {\n  $pre-brand-colour: map-get($_govuk-pre-brand-colours, $colour);\n\n  @if $pre-brand-colour {\n    $corresponding-colour: nth($pre-brand-colour, 1);\n    $corresponding-variant: nth($pre-brand-colour, 2);\n\n    $corresponding-govuk-colour-call: 'govuk-colour(\"#{$corresponding-colour}\", $variant: \"#{$corresponding-variant}\")';\n\n    @if _should-warn(\"pre-brand-colour\") {\n      @warn _warning-text(\"pre-brand-colour\",\n        \"We've updated GOV.UK Frontend's colour palette. Use \" +\n        \"`#{$corresponding-govuk-colour-call}` instead of \" +\n        \"`govuk-colour(\\\"#{$colour}\\\")`. The `#{$colour}` colour is \" +\n        \"deprecated and we'll remove it in the next major version.\"\n      );\n    }\n\n    @return govuk-colour($corresponding-colour, $variant: $corresponding-variant);\n  }\n}\n\n/// Get the colour for a government organisation\n///\n/// @param {String} $organisation - Organisation name, lowercase, hyphenated\n/// @param {Boolean} $websafe - Deprecated. Use $contrast-safe instead.\n/// @param {Boolean} $contrast-safe [true] - By default a version of the colour\n///   will be returned which has a minimum 4.5:1 contrast ratio when used with\n///   white, as per the WCAG 2.1 Level AA guidelines. If you want to use the\n///   non-contrast safe version you can set this to `false` but your should\n///   ensure that you still meets contrast requirements for accessibility -\n///   for example, do not use the non-contrast safe version for text.\n///\n/// @return {Colour} Representation of colour for organisation\n/// @throw if `$organisation` is not a known organisation\n/// @access public\n\n@function govuk-organisation-colour($organisation, $websafe: null, $contrast-safe: true) {\n  // Check if the $organisation exists in the aliases map. If so, change the\n  // value of $organisation to the aliased value.\n  @if map-has-key($_govuk_colours-organisations-aliases, $organisation) {\n    $organisation: map-get($_govuk_colours-organisations-aliases, $organisation);\n  }\n\n  // Check to see if the organisation exists\n  @if not map-has-key($govuk-colours-organisations, $organisation) {\n    @error \"Unknown organisation `#{$organisation}`\";\n  }\n\n  // Output a deprecation warning if the legacy colour palette is being used.\n  // Remove in next major version.\n  $is-legacy: $govuk-colours-organisations == $_govuk-legacy-organisation-colours;\n  @if $is-legacy and _should-warn(\"legacy-organisation-colours\") {\n    @warn _warning-text(\"legacy-organisation-colours\",\n      \"We've updated the organisation colour palette. Opt in to the new \" +\n      \"colours using `$govuk-new-organisation-colours: true`. The old \" +\n      \"palette is deprecated and we'll remove it in the next major version.\"\n    );\n  }\n\n  // Output a warning if $websafe is set.\n  @if $websafe and _should-warn(\"organisation-colour-websafe-param\") {\n    @warn _warning-text(\"organisation-colour-websafe-param\",\n      \"The `$websafe` parameter of `govuk-organisation-colour` has been \" +\n      \"renamed to `$contrast-safe`. The old parameter name will be removed in \" +\n      \"the next major version.\"\n    );\n  }\n\n  $org-colour: map-get($govuk-colours-organisations, $organisation);\n\n  @if map-has-key($org-colour, deprecation-message) and _should-warn(\"organisation-colours\") {\n    @warn _warning-text(\n      \"organisation-colours\",\n      map-get($org-colour, deprecation-message)\n    );\n  }\n\n  // If the $websafe parameter is being used (it has been explicitly set as true\n  // or false), assume the user hasn't updated to use $contrast-safe yet and map\n  // the old parameter's value onto the new parameter.\n  @if type-of($websafe) != \"null\" {\n    $contrast-safe: $websafe;\n  }\n\n  // Determine the contrast-safe key to use depending on whether it's the new\n  // palette or the legacy palette\n  $safe-key: if($govuk-new-organisation-colours, \"contrast-safe\", \"colour-websafe\");\n\n  @if $contrast-safe and map-has-key($org-colour, $safe-key) {\n    @return map-get($org-colour, $safe-key);\n  } @else {\n    @return map-get($org-colour, colour);\n  }\n}\n\n/// Make a colour darker by mixing it with black\n///\n/// @param {Colour} $colour - colour to shade\n/// @param {Number} $percentage - percentage of black to mix with $colour.\n///   Not used.\n/// @return {Colour}\n/// @access public\n///\n/// @deprecated Will be removed in 6.0\n\n@function govuk-shade($colour, $percentage: false) {\n  @if _should-warn(\"govuk-shade\") {\n    @warn _warning-text(\"govuk-shade\", \"The govuk-shade function is deprecated. It now just returns the colour passed to it. Use the new GOV.UK colour palette instead.\");\n  }\n\n  @return $colour;\n}\n\n/// No longer operable. Only returns the colour passed to it\n///\n/// @param {Colour} $colour - colour to tint\n/// @param {Number} $percentage - percentage of white to mix with $colour.\n///   Not used.\n/// @return {Colour}\n/// @access public\n///\n/// @deprecated Will be removed in 6.0\n\n@function govuk-tint($colour, $percentage: false) {\n  @if _should-warn(\"govuk-tint\") {\n    @warn _warning-text(\"govuk-tint\", \"The govuk-tint function is deprecated. It now just returns the colour passed to it. Use the new GOV.UK colour palette instead.\");\n  }\n\n  @return $colour;\n}\n\n/// Converts a colour with potential float values for its RGB channels\n/// into hexadecimal notation\n///\n/// This ensures the colour is rendered properly by Safari < 12\n///\n/// @param {Colour} $colour - The colour to convert\n/// @return {Colour}\n/// @access private\n@function _as-hexadecimal($colour) {\n  @if not function-exists(change-color) {\n    @return $colour;\n  }\n\n  // `red`,`green` and `blue` functions are limited to 'legacy' colour spaces\n  // ensuring we don't get floating computations on them\n  $parts: (\n    \"red\": red($colour),\n    \"green\": green($colour),\n    \"blue\": blue($colour),\n    \"alpha\": alpha($colour)\n  );\n\n  @return change-color($colour, $parts...);\n}\n"]}
